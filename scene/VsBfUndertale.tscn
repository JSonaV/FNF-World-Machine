[gd_scene load_steps=63 format=2]

[ext_resource path="res://assets/image/Progress Border.png" type="Texture" id=1]
[ext_resource path="res://assets/image/Progress Red.png" type="Texture" id=2]
[ext_resource path="res://scene/Singy1.gd" type="Script" id=3]
[ext_resource path="res://scene/ColorRect.tscn" type="PackedScene" id=4]
[ext_resource path="res://assets/musics/Penguin.ogg" type="AudioStream" id=5]
[ext_resource path="res://assets/images/weeb/pixelUI/arrows-pixels.png" type="Texture" id=6]
[ext_resource path="res://assets/image/Progress Green.png" type="Texture" id=7]
[ext_resource path="res://assets/Bulb.png" type="Texture" id=8]
[ext_resource path="res://assets/image/Penguin.png" type="Texture" id=9]
[ext_resource path="res://scene/VsBfUndertale.gd" type="Script" id=11]

[sub_resource type="AtlasTexture" id=31]
atlas = ExtResource( 6 )
region = Rect2( 0, 0, 17, 17 )

[sub_resource type="AtlasTexture" id=32]
atlas = ExtResource( 6 )
region = Rect2( 0, 17, 17, 17 )

[sub_resource type="AtlasTexture" id=33]
atlas = ExtResource( 6 )
region = Rect2( 0, 34, 17, 17 )

[sub_resource type="AtlasTexture" id=34]
atlas = ExtResource( 6 )
region = Rect2( 0, 51, 17, 17 )

[sub_resource type="AtlasTexture" id=35]
atlas = ExtResource( 6 )
region = Rect2( 0, 68, 17, 17 )

[sub_resource type="SpriteFrames" id=114]
animations = [ {
"frames": [ SubResource( 31 ), SubResource( 32 ), SubResource( 33 ), SubResource( 34 ), SubResource( 35 ) ],
"loop": true,
"name": "default",
"speed": 5.0
} ]

[sub_resource type="RectangleShape2D" id=115]
extents = Vector2( 2, 2 )

[sub_resource type="AtlasTexture" id=38]
atlas = ExtResource( 6 )
region = Rect2( 17, 0, 17, 17 )

[sub_resource type="AtlasTexture" id=39]
atlas = ExtResource( 6 )
region = Rect2( 17, 17, 17, 17 )

[sub_resource type="AtlasTexture" id=40]
atlas = ExtResource( 6 )
region = Rect2( 17, 34, 17, 17 )

[sub_resource type="AtlasTexture" id=41]
atlas = ExtResource( 6 )
region = Rect2( 17, 51, 17, 17 )

[sub_resource type="AtlasTexture" id=42]
atlas = ExtResource( 6 )
region = Rect2( 17, 68, 17, 17 )

[sub_resource type="SpriteFrames" id=116]
animations = [ {
"frames": [ SubResource( 38 ), SubResource( 39 ), SubResource( 40 ), SubResource( 41 ), SubResource( 42 ) ],
"loop": true,
"name": "default",
"speed": 5.0
} ]

[sub_resource type="RectangleShape2D" id=117]
extents = Vector2( 2, 2 )

[sub_resource type="AtlasTexture" id=45]
atlas = ExtResource( 6 )
region = Rect2( 34, 0, 17, 17 )

[sub_resource type="AtlasTexture" id=46]
atlas = ExtResource( 6 )
region = Rect2( 34, 17, 17, 17 )

[sub_resource type="AtlasTexture" id=47]
atlas = ExtResource( 6 )
region = Rect2( 34, 34, 17, 17 )

[sub_resource type="AtlasTexture" id=48]
atlas = ExtResource( 6 )
region = Rect2( 34, 51, 17, 17 )

[sub_resource type="AtlasTexture" id=49]
atlas = ExtResource( 6 )
region = Rect2( 34, 68, 17, 17 )

[sub_resource type="SpriteFrames" id=118]
animations = [ {
"frames": [ SubResource( 45 ), SubResource( 46 ), SubResource( 47 ), SubResource( 48 ), SubResource( 49 ) ],
"loop": true,
"name": "default",
"speed": 5.0
} ]

[sub_resource type="RectangleShape2D" id=119]
extents = Vector2( 2, 2 )

[sub_resource type="AtlasTexture" id=52]
atlas = ExtResource( 6 )
region = Rect2( 51, 0, 17, 17 )

[sub_resource type="AtlasTexture" id=53]
atlas = ExtResource( 6 )
region = Rect2( 51, 17, 17, 17 )

[sub_resource type="AtlasTexture" id=54]
atlas = ExtResource( 6 )
region = Rect2( 51, 34, 17, 17 )

[sub_resource type="AtlasTexture" id=55]
atlas = ExtResource( 6 )
region = Rect2( 51, 51, 17, 17 )

[sub_resource type="AtlasTexture" id=56]
atlas = ExtResource( 6 )
region = Rect2( 51, 68, 17, 17 )

[sub_resource type="SpriteFrames" id=120]
animations = [ {
"frames": [ SubResource( 52 ), SubResource( 53 ), SubResource( 54 ), SubResource( 55 ), SubResource( 56 ) ],
"loop": true,
"name": "default",
"speed": 5.0
} ]

[sub_resource type="RectangleShape2D" id=121]
extents = Vector2( 2, 2 )

[sub_resource type="DynamicFontData" id=59]
font_path = "res://assets/fonts/Pixellari.ttf"

[sub_resource type="DynamicFont" id=122]
font_data = SubResource( 59 )

[sub_resource type="DynamicFont" id=123]
font_data = SubResource( 59 )

[sub_resource type="RectangleShape2D" id=124]
extents = Vector2( 136, 10 )

[sub_resource type="Animation" id=125]
length = 2.0
tracks/0/type = "value"
tracks/0/path = NodePath("ColorRect:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ) ]
}
tracks/1/type = "method"
tracks/1/path = NodePath(".")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 1.5 ),
"transitions": PoolRealArray( 1 ),
"values": [ {
"args": [  ],
"method": "gameDone"
} ]
}

[sub_resource type="Animation" id=126]
length = 2.0
tracks/0/type = "value"
tracks/0/path = NodePath("ColorRect:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Label:modulate")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="DynamicFontData" id=113]
font_path = "res://assets/fonts/Pixellari.ttf"

[sub_resource type="DynamicFont" id=127]
size = 32
outline_color = Color( 0, 0.0862745, 1, 1 )
font_data = SubResource( 113 )

[sub_resource type="DynamicFontData" id=66]
font_path = "res://assets/fonts/Pixellari.ttf"

[sub_resource type="DynamicFont" id=128]
size = 30
font_data = SubResource( 66 )

[sub_resource type="Shader" id=161]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/VHS-and-CRT-monitor-effect

This shader is under CC0 license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result to godotshaders.com.
*/

shader_type canvas_item;

//*** IMPORTANT! ***/ 
// - If you are using this shader to affect the node it is applied to set 'overlay' to false (unchecked in the instepctor).
// - If you are using this shader as an overlay, and want the shader to affect the nodes below in the Scene hierarchy,
//   set 'overlay' to true (checked in the inspector).
// On Mac there is potentially a bug causing this to not work properly. If that is the case and you want to use the shader as an overlay
// change all \"overlay ? SCREEN_TEXTURE : TEXTURE\" to only \"SCREEN_TEXTURE\" on lines 129-140, and \"vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV);\"
// to \"vec2 uv = warp(SCREEN_UV);\" on line 98.
uniform bool overlay = false;

uniform float scanlines_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float scanlines_width : hint_range(0.0, 0.5) = 0.25;
uniform float grille_opacity : hint_range(0.0, 1.0) = 0.3;
uniform vec2 resolution = vec2(640.0, 480.0); // Set the number of rows and columns the texture will be divided in. Scanlines and grille will make a square based on these values

uniform bool pixelate = true; // Fill each square (\"pixel\") with a sampled color, creating a pixel look and a more accurate representation of how a CRT monitor would work.

uniform bool roll = true;
uniform float roll_speed = 8.0; // Positive values are down, negative are up
uniform float roll_size : hint_range(0.0, 100.0) = 15.0;
uniform float roll_variation : hint_range(0.1, 5.0) = 1.8; // This valie is not an exact science. You have to play around with the value to find a look you like. How this works is explained in the code below.
uniform float distort_intensity : hint_range(0.0, 0.2) = 0.05; // The distortion created by the rolling effect.

uniform float noise_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float noise_speed = 5.0; // There is a movement in the noise pattern that can be hard to see first. This sets the speed of that movement.

uniform float static_noise_intensity : hint_range(0.0, 1.0) = 0.06;

uniform float aberration : hint_range(-1.0, 1.0) = 0.03; // Chromatic aberration, a distortion on each color channel.
uniform float brightness = 1.4; // When adding scanline gaps and grille the image can get very dark. Brightness tries to compensate for that.
uniform bool discolor = true; // Add a discolor effect simulating a VHS

uniform float warp_amount :hint_range(0.0, 5.0) = 1.0; // Warp the texture edges simulating the curved glass of a CRT monitor or old TV.
uniform bool clip_warp = false;

uniform float vignette_intensity = 0.4; // Size of the vignette, how far towards the middle it should go.
uniform float vignette_opacity : hint_range(0.0, 1.0) = 0.5;

// Used by the noise functin to generate a pseudo random value between 0.0 and 1.0
vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

// Generate a Perlin noise used by the distortion effects
float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),
                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),
                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) * 0.5 + 0.5;
}

// Takes in the UV and warps the edges, creating the spherized effect
vec2 warp(vec2 uv){
	vec2 delta = uv - 0.5;
	float delta2 = dot(delta.xy, delta.xy);
	float delta4 = delta2 * delta2;
	float delta_offset = delta4 * warp_amount;
	
	return uv + delta * delta_offset;
}

// Adds a black border to hide stretched pixel created by the warp effect
float border (vec2 uv){
	float radius = min(warp_amount, 0.08);
	radius = max(min(min(abs(radius * 2.0), abs(1.0)), abs(1.0)), 1e-5);
	vec2 abs_uv = abs(uv * 2.0 - 1.0) - vec2(1.0, 1.0) + radius;
	float dist = length(max(vec2(0.0), abs_uv)) / radius;
	float square = smoothstep(0.96, 1.0, dist);
	return clamp(1.0 - square, 0.0, 1.0);
}

// Adds a vignette shadow to the edges of the image
float vignette(vec2 uv){
	uv *= 1.0 - uv.xy;
	float vignette = uv.x * uv.y * 15.0;
	return pow(vignette, vignette_intensity * vignette_opacity);
}

void fragment()
{
	vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV); // Warp the uv. uv will be used in most cases instead of UV to keep the warping
	vec2 text_uv = uv;
	vec2 roll_uv = vec2(0.0);
	float time = roll ? TIME : 0.0;
	

	// Pixelate the texture based on the given resolution.
	if (pixelate)
	{
		text_uv = ceil(uv * resolution) / resolution;
	}
	
	// Create the rolling effect. We need roll_line a bit later to make the noise effect.
	// That is why this runs if roll is true OR noise_opacity is over 0.
	float roll_line = 0.0;
	if (roll || noise_opacity > 0.0)
	{
		// Create the areas/lines where the texture will be distorted.
		roll_line = smoothstep(0.3, 0.9, sin(uv.y * roll_size - (time * roll_speed) ) );
		// Create more lines of a different size and apply to the first set of lines. This creates a bit of variation.
		roll_line *= roll_line * smoothstep(0.3, 0.9, sin(uv.y * roll_size * roll_variation - (time * roll_speed * roll_variation) ) );
		// Distort the UV where where the lines are
		roll_uv = vec2(( roll_line * distort_intensity * (1.-UV.x)), 0.0);
	}
	
	vec4 text;
	if (roll)
	{
		// If roll is true distort the texture with roll_uv. The texture is split up into RGB to 
		// make some chromatic aberration. We apply the aberration to the red and green channels accorging to the aberration parameter
		// and intensify it a bit in the roll distortion.
		text.r = texture(SCREEN_TEXTURE, text_uv + roll_uv * 0.8 + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv + roll_uv * 1.2 - vec2(aberration, 0.0) * .1 ).g;
		text.b = texture(SCREEN_TEXTURE, text_uv + roll_uv).b;
		text.a = 1.0;
	}
	else
	{
		// If roll is false only apply the aberration without any distorion. The aberration values are very small so the .1 is only 
		// to make the slider in the Inspector less sensitive.
		text.r = texture(SCREEN_TEXTURE, text_uv + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv - vec2(aberration, 0.0) * .1).g;
		text.b = texture(SCREEN_TEXTURE, text_uv).b;
		text.a = 1.0;
	}
	
	float r = text.r;
	float g = text.g;
	float b = text.b;
	
	uv = warp(UV);
	
	// CRT monitors don't have pixels but groups of red, green and blue dots or lines, called grille. We isolate the texture's color channels 
	// and divide it up in 3 offsetted lines to show the red, green and blue colors next to each other, with a small black gap between.
	if (grille_opacity > 0.0){
		
		float g_r = smoothstep(0.85, 0.95, abs(sin(uv.x * (resolution.x * 3.14159265))));
		r = mix(r, r * g_r, grille_opacity);
		
		float g_g = smoothstep(0.85, 0.95, abs(sin(1.05 + uv.x * (resolution.x * 3.14159265))));
		g = mix(g, g * g_g, grille_opacity);
		
		float b_b = smoothstep(0.85, 0.95, abs(sin(2.1 + uv.x * (resolution.x * 3.14159265))));
		b = mix(b, b * b_b, grille_opacity);
		
	}
	
	// Apply the grille to the texture's color channels and apply Brightness. Since the grille and the scanlines (below) make the image very dark you
	// can compensate by increasing the brightness.
	text.r = clamp(r * brightness, 0.0, 1.0);
	text.g = clamp(g * brightness, 0.0, 1.0);
	text.b = clamp(b * brightness, 0.0, 1.0);
	
	// Scanlines are the horizontal lines that make up the image on a CRT monitor. 
	// Here we are actual setting the black gap between each line, which I guess is not the right definition of the word, but you get the idea  
	float scanlines = 0.5;
	if (scanlines_opacity > 0.0)
	{
		// Same technique as above, create lines with sine and applying it to the texture. Smoothstep to allow setting the line size.
		scanlines = smoothstep(scanlines_width, scanlines_width + 0.5, abs(sin(uv.y * (resolution.y * 3.14159265))));
		text.rgb = mix(text.rgb, text.rgb * vec3(scanlines), scanlines_opacity);
	}
	
	// Apply the banded noise.
	if (noise_opacity > 0.0)
	{
		// Generate a noise pattern that is very stretched horizontally, and animate it with noise_speed
		float noise = smoothstep(0.4, 0.5, noise(uv * vec2(2.0, 200.0) + vec2(10.0, (TIME * (noise_speed))) ) );
		
		// We use roll_line (set above) to define how big the noise should be vertically (multiplying cuts off all black parts).
		// We also add in some basic noise with random() to break up the noise pattern above. The noise is sized according to 
		// the resolution value set in the inspector. If you don't like this look you can 
		// change \"ceil(uv * resolution) / resolution\" to only \"uv\" to make it less pixelated. Or multiply resolution with som value
		// greater than 1.0 to make them smaller.
		roll_line *= noise * scanlines * clamp(random((ceil(uv * resolution) / resolution) + vec2(TIME * 0.8, 0.0)).x + 0.8, 0.0, 1.0);
		// Add it to the texture based on noise_opacity
		text.rgb = clamp(mix(text.rgb, text.rgb + roll_line, noise_opacity), vec3(0.0), vec3(1.0));
	}
	
	// Apply static noise by generating it over the whole screen in the same way as above
	if (static_noise_intensity > 0.0)
	{
		text.rgb += clamp(random((ceil(uv * resolution) / resolution) + fract(TIME)).x, 0.0, 1.0) * static_noise_intensity;
	}
	
	// Apply a black border to hide imperfections caused by the warping.
	// Also apply the vignette
	text.rgb *= border(uv);
	text.rgb *= vignette(uv);
	// Hides the black border and make that area transparent. Good if you want to add the the texture on top an image of a TV or monitor.
	if (clip_warp)
	{
		text.a = border(uv);
	}
	
	// Apply discoloration to get a VHS look (lower saturation and higher contrast)
	// You can play with the values below or expose them in the Inspector.
	float saturation = 0.5;
	float contrast = 1.2;
	if (discolor)
	{
		// Saturation
		vec3 greyscale = vec3(text.r + text.g + text.b) / 3.;
		text.rgb = mix(text.rgb, greyscale, saturation);
		
		// Contrast
		float midpoint = pow(0.5, 2.2);
		text.rgb = (text.rgb - vec3(midpoint)) * contrast + midpoint;
	}
	
	COLOR = text;
}"

[sub_resource type="ShaderMaterial" id=162]
resource_local_to_scene = true
shader = SubResource( 161 )
shader_param/overlay = true
shader_param/scanlines_opacity = 0.4
shader_param/scanlines_width = 0.25
shader_param/grille_opacity = 0.3
shader_param/resolution = Vector2( 640, 480 )
shader_param/pixelate = true
shader_param/roll = true
shader_param/roll_speed = 8.0
shader_param/roll_size = 15.0
shader_param/roll_variation = 1.8
shader_param/distort_intensity = 0.029
shader_param/noise_opacity = 0.4
shader_param/noise_speed = 5.0
shader_param/static_noise_intensity = 0.148
shader_param/aberration = 0.03
shader_param/brightness = 1.4
shader_param/discolor = true
shader_param/warp_amount = 1.0
shader_param/clip_warp = false
shader_param/vignette_intensity = 0.4
shader_param/vignette_opacity = 0.5

[sub_resource type="Shader" id=163]
code = "/*
	Glitch Effect Shader by Yui Kinomoto @arlez80

	MIT License
*/

shader_type canvas_item;

// 振動の強さ
uniform float shake_power = 0.03;
// 振動率
uniform float shake_rate : hint_range( 0.0, 1.0 ) = 0.2;
// 振動速度
uniform float shake_speed = 5.0;
// 振動ブロックサイズ
uniform float shake_block_size = 30.5;
// 色の分離率
uniform float shake_color_rate : hint_range( 0.0, 1.0 ) = 0.01;

float random( float seed )
{
	return fract( 543.2543 * sin( dot( vec2( seed, seed ), vec2( 3525.46, -54.3415 ) ) ) );
}

void fragment( )
{
	float enable_shift = float(
		random( trunc( TIME * shake_speed ) )
	<	shake_rate
	);

	vec2 fixed_uv = SCREEN_UV;
	fixed_uv.x += (
		random(
			( trunc( SCREEN_UV.y * shake_block_size ) / shake_block_size )
		+	TIME
		) - 0.5
	) * shake_power * enable_shift;

	vec4 pixel_color = textureLod( SCREEN_TEXTURE, fixed_uv, 0.0 );
	pixel_color.r = mix(
		pixel_color.r
	,	textureLod( SCREEN_TEXTURE, fixed_uv + vec2( shake_color_rate, 0.0 ), 0.0 ).r
	,	enable_shift
	);
	pixel_color.b = mix(
		pixel_color.b
	,	textureLod( SCREEN_TEXTURE, fixed_uv + vec2( -shake_color_rate, 0.0 ), 0.0 ).b
	,	enable_shift
	);
	COLOR = pixel_color;
}
"

[sub_resource type="ShaderMaterial" id=164]
shader = SubResource( 163 )
shader_param/shake_power = 0.03
shader_param/shake_rate = 0.2
shader_param/shake_speed = 5.0
shader_param/shake_block_size = 30.5
shader_param/shake_color_rate = 0.01

[sub_resource type="AtlasTexture" id=167]
atlas = ExtResource( 9 )
region = Rect2( 0, 96, 96, 96 )

[sub_resource type="AtlasTexture" id=168]
atlas = ExtResource( 9 )
region = Rect2( 96, 96, 96, 96 )

[sub_resource type="AtlasTexture" id=165]
atlas = ExtResource( 9 )
region = Rect2( 96, 0, 96, 96 )

[sub_resource type="AtlasTexture" id=166]
atlas = ExtResource( 9 )
region = Rect2( 192, 0, 96, 96 )

[sub_resource type="AtlasTexture" id=169]
atlas = ExtResource( 9 )
region = Rect2( 96, 192, 96, 96 )

[sub_resource type="AtlasTexture" id=170]
atlas = ExtResource( 9 )
region = Rect2( 192, 192, 96, 96 )

[sub_resource type="AtlasTexture" id=171]
atlas = ExtResource( 9 )
region = Rect2( 192, 96, 96, 96 )

[sub_resource type="AtlasTexture" id=172]
atlas = ExtResource( 9 )
region = Rect2( 0, 192, 96, 96 )

[sub_resource type="AtlasTexture" id=173]
atlas = ExtResource( 9 )
region = Rect2( 0, 0, 96, 96 )

[sub_resource type="SpriteFrames" id=174]
animations = [ {
"frames": [ SubResource( 167 ), SubResource( 168 ), SubResource( 168 ), SubResource( 168 ) ],
"loop": false,
"name": "Right",
"speed": 10.0
}, {
"frames": [ SubResource( 165 ), SubResource( 166 ), SubResource( 166 ), SubResource( 166 ) ],
"loop": false,
"name": "Left",
"speed": 10.0
}, {
"frames": [ SubResource( 169 ), SubResource( 170 ), SubResource( 170 ), SubResource( 170 ) ],
"loop": false,
"name": "Down",
"speed": 10.0
}, {
"frames": [ SubResource( 171 ), SubResource( 172 ), SubResource( 172 ), SubResource( 172 ) ],
"loop": false,
"name": "Up",
"speed": 10.0
}, {
"frames": [ SubResource( 173 ) ],
"loop": false,
"name": "Idle",
"speed": 10.0
} ]

[node name="VsBfUndertale" type="Node2D"]
script = ExtResource( 11 )

[node name="bullet" type="Node2D" parent="."]

[node name="CanvasLayer" type="CanvasLayer" parent="."]
layer = 10

[node name="Singy" type="Node2D" parent="CanvasLayer"]
process_priority = 10
script = ExtResource( 3 )

[node name="TimerSong" type="Timer" parent="CanvasLayer/Singy"]
one_shot = true

[node name="TweenBF2" type="Tween" parent="CanvasLayer/Singy"]

[node name="TimerBF" type="Timer" parent="CanvasLayer/Singy"]
autostart = true

[node name="TweenBF1" type="Tween" parent="CanvasLayer/Singy"]

[node name="JudgementResult" type="Node2D" parent="CanvasLayer/Singy"]
modulate = Color( 1, 1, 1, 0.498039 )
position = Vector2( 824, 216 )

[node name="EnemyArrow" type="Node2D" parent="CanvasLayer/Singy"]
position = Vector2( 104, 64 )
__meta__ = {
"_edit_group_": true
}

[node name="Left" type="Area2D" parent="CanvasLayer/Singy/EnemyArrow"]
scale = Vector2( 4, 4 )
collision_layer = 2
collision_mask = 2
__meta__ = {
"_edit_group_": true
}

[node name="Left" type="AnimatedSprite" parent="CanvasLayer/Singy/EnemyArrow/Left"]
frames = SubResource( 114 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="CanvasLayer/Singy/EnemyArrow/Left"]
shape = SubResource( 115 )

[node name="Notes" type="Node2D" parent="CanvasLayer/Singy/EnemyArrow/Left"]

[node name="Down" type="Area2D" parent="CanvasLayer/Singy/EnemyArrow"]
position = Vector2( 72, 0 )
scale = Vector2( 4, 4 )
collision_layer = 2
collision_mask = 2
__meta__ = {
"_edit_group_": true
}

[node name="Down" type="AnimatedSprite" parent="CanvasLayer/Singy/EnemyArrow/Down"]
frames = SubResource( 116 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="CanvasLayer/Singy/EnemyArrow/Down"]
shape = SubResource( 117 )

[node name="Notes" type="Node2D" parent="CanvasLayer/Singy/EnemyArrow/Down"]

[node name="Up" type="Area2D" parent="CanvasLayer/Singy/EnemyArrow"]
position = Vector2( 144, 0 )
scale = Vector2( 4, 4 )
collision_layer = 2
collision_mask = 2
__meta__ = {
"_edit_group_": true
}

[node name="Up" type="AnimatedSprite" parent="CanvasLayer/Singy/EnemyArrow/Up"]
frames = SubResource( 118 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="CanvasLayer/Singy/EnemyArrow/Up"]
shape = SubResource( 119 )

[node name="Notes" type="Node2D" parent="CanvasLayer/Singy/EnemyArrow/Up"]

[node name="Right" type="Area2D" parent="CanvasLayer/Singy/EnemyArrow"]
position = Vector2( 216, 0 )
scale = Vector2( 4, 4 )
collision_layer = 2
collision_mask = 2
__meta__ = {
"_edit_group_": true
}

[node name="Right" type="AnimatedSprite" parent="CanvasLayer/Singy/EnemyArrow/Right"]
frames = SubResource( 120 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="CanvasLayer/Singy/EnemyArrow/Right"]
shape = SubResource( 121 )

[node name="Notes" type="Node2D" parent="CanvasLayer/Singy/EnemyArrow/Right"]

[node name="Tween" type="Tween" parent="CanvasLayer/Singy/EnemyArrow"]

[node name="Bulb" type="Sprite" parent="CanvasLayer/Singy"]
visible = false
modulate = Color( 0.878431, 0.00392157, 1, 0 )
position = Vector2( 504, 296 )
scale = Vector2( 0.3, 0.3 )
texture = ExtResource( 8 )

[node name="Tween" type="Tween" parent="CanvasLayer/Singy/Bulb"]

[node name="BFArrow" type="Node2D" parent="CanvasLayer/Singy"]
position = Vector2( 712, 64 )
__meta__ = {
"_edit_group_": true
}

[node name="Left" type="Area2D" parent="CanvasLayer/Singy/BFArrow"]
scale = Vector2( 4, 4 )
__meta__ = {
"_edit_group_": true
}

[node name="Left" type="AnimatedSprite" parent="CanvasLayer/Singy/BFArrow/Left"]
frames = SubResource( 114 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="CanvasLayer/Singy/BFArrow/Left"]
shape = SubResource( 115 )

[node name="Notes" type="Node2D" parent="CanvasLayer/Singy/BFArrow/Left"]

[node name="Down" type="Area2D" parent="CanvasLayer/Singy/BFArrow"]
position = Vector2( 72, 0 )
scale = Vector2( 4, 4 )
__meta__ = {
"_edit_group_": true
}

[node name="Down" type="AnimatedSprite" parent="CanvasLayer/Singy/BFArrow/Down"]
frames = SubResource( 116 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="CanvasLayer/Singy/BFArrow/Down"]
shape = SubResource( 117 )

[node name="Notes" type="Node2D" parent="CanvasLayer/Singy/BFArrow/Down"]

[node name="Up" type="Area2D" parent="CanvasLayer/Singy/BFArrow"]
position = Vector2( 144, 0 )
scale = Vector2( 4, 4 )
__meta__ = {
"_edit_group_": true
}

[node name="Up" type="AnimatedSprite" parent="CanvasLayer/Singy/BFArrow/Up"]
frames = SubResource( 118 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="CanvasLayer/Singy/BFArrow/Up"]
shape = SubResource( 119 )

[node name="Notes" type="Node2D" parent="CanvasLayer/Singy/BFArrow/Up"]

[node name="Right" type="Area2D" parent="CanvasLayer/Singy/BFArrow"]
position = Vector2( 216, 0 )
scale = Vector2( 4, 4 )
__meta__ = {
"_edit_group_": true
}

[node name="Right" type="AnimatedSprite" parent="CanvasLayer/Singy/BFArrow/Right"]
frames = SubResource( 120 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="CanvasLayer/Singy/BFArrow/Right"]
shape = SubResource( 121 )

[node name="Notes" type="Node2D" parent="CanvasLayer/Singy/BFArrow/Right"]

[node name="Tween" type="Tween" parent="CanvasLayer/Singy/BFArrow"]

[node name="AudioStreamPlayer" type="AudioStreamPlayer" parent="CanvasLayer/Singy"]
stream = ExtResource( 5 )

[node name="Camera2D" type="Camera2D" parent="CanvasLayer/Singy"]
position = Vector2( 512, 300 )
current = true

[node name="Node2D" type="Node2D" parent="CanvasLayer/Singy"]

[node name="BFArrowBump" type="Tween" parent="CanvasLayer/Singy"]

[node name="Timer" type="Timer" parent="CanvasLayer/Singy"]
wait_time = 0.187
one_shot = true

[node name="Tween" type="Tween" parent="CanvasLayer/Singy"]

[node name="Score" type="Label" parent="CanvasLayer/Singy"]
margin_left = 376.0
margin_top = 544.0
margin_right = 464.0
margin_bottom = 560.0
custom_fonts/font = SubResource( 122 )
text = "Score:"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Accuration" type="Label" parent="CanvasLayer/Singy"]
margin_left = 552.0
margin_top = 544.0
margin_right = 656.0
margin_bottom = 560.0
custom_fonts/font = SubResource( 123 )
text = "Accuracy:"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="TextureProgress" type="TextureProgress" parent="CanvasLayer/Singy"]
margin_left = 248.0
margin_top = 528.0
margin_right = 948.0
margin_bottom = 536.0
value = 50.0
texture_under = ExtResource( 2 )
texture_over = ExtResource( 1 )
texture_progress = ExtResource( 7 )
fill_mode = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Area2D" type="Area2D" parent="CanvasLayer/Singy"]
position = Vector2( 808, -168 )
__meta__ = {
"_edit_group_": true
}

[node name="CollisionShape2D" type="CollisionShape2D" parent="CanvasLayer/Singy/Area2D"]
shape = SubResource( 124 )
__meta__ = {
"_edit_group_": true
}

[node name="Finish" type="Tween" parent="CanvasLayer/Singy"]

[node name="AnimationPlayer" type="AnimationPlayer" parent="CanvasLayer/Singy"]
anims/Finish = SubResource( 125 )
anims/Lose = SubResource( 126 )

[node name="ComboCounter" type="Label" parent="CanvasLayer/Singy"]
modulate = Color( 1, 1, 1, 0.47451 )
margin_left = 720.0
margin_right = 920.0
margin_bottom = 600.0
rect_pivot_offset = Vector2( 96, 300 )
custom_colors/font_color = Color( 0.0745098, 0.784314, 1, 1 )
custom_fonts/font = SubResource( 127 )
align = 1
valign = 1
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": ""
}

[node name="ColorRect" parent="CanvasLayer/Singy" instance=ExtResource( 4 )]
visible = false

[node name="Label" type="Label" parent="CanvasLayer/Singy"]
visible = false
modulate = Color( 1, 1, 1, 0 )
margin_right = 1024.0
margin_bottom = 600.0
custom_fonts/font = SubResource( 128 )
text = "[Sorry I lost motivation, didn't make a losing animation]
[Press Enter to try again]"
align = 1
valign = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="TweenCamera" type="Tween" parent="CanvasLayer/Singy"]

[node name="TweenThunder" type="Tween" parent="CanvasLayer/Singy"]

[node name="Label2" type="Label" parent="CanvasLayer/Singy"]
visible = false
margin_right = 64.0
margin_bottom = 32.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ColorRect2" type="ColorRect" parent="CanvasLayer/Singy"]
visible = false
modulate = Color( 1, 1, 1, 0 )
margin_left = 60.0
margin_top = 32.0
margin_right = 1228.0
margin_bottom = 696.0
color = Color( 0.0705882, 0.886275, 0.972549, 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ColorRect4" type="ColorRect" parent="CanvasLayer/Singy"]
visible = false
material = SubResource( 162 )
margin_right = 1024.0
margin_bottom = 596.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Countdown" type="Timer" parent="CanvasLayer/Singy"]
wait_time = 3.0
one_shot = true
autostart = true

[node name="ColorRect3" type="ColorRect" parent="CanvasLayer/Singy"]
material = SubResource( 164 )
margin_right = 1024.0
margin_bottom = 600.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="TimeTween" type="Tween" parent="CanvasLayer"]

[node name="Penguin" type="AnimatedSprite" parent="."]
position = Vector2( 512, 352 )
scale = Vector2( 4, 4 )
frames = SubResource( 174 )
animation = "Down"

[connection signal="timeout" from="CanvasLayer/Singy/TimerSong" to="CanvasLayer/Singy" method="_on_TimerSong_timeout"]
[connection signal="area_entered" from="CanvasLayer/Singy/EnemyArrow/Left" to="CanvasLayer/Singy" method="_on_Left_area_entered"]
[connection signal="area_entered" from="CanvasLayer/Singy/EnemyArrow/Down" to="CanvasLayer/Singy" method="_on_Down_area_entered"]
[connection signal="area_entered" from="CanvasLayer/Singy/EnemyArrow/Up" to="CanvasLayer/Singy" method="_on_Up_area_entered"]
[connection signal="area_entered" from="CanvasLayer/Singy/EnemyArrow/Right" to="CanvasLayer/Singy" method="_on_Right_area_entered"]
[connection signal="finished" from="CanvasLayer/Singy/AudioStreamPlayer" to="CanvasLayer/Singy" method="_on_AudioStreamPlayer_finished"]
[connection signal="timeout" from="CanvasLayer/Singy/Timer" to="CanvasLayer/Singy" method="_on_Timer_timeout"]
[connection signal="area_entered" from="CanvasLayer/Singy/Area2D" to="CanvasLayer/Singy" method="_on_Area2D_area_entered"]
[connection signal="tween_all_completed" from="CanvasLayer/Singy/Finish" to="CanvasLayer/Singy" method="_on_Finish_tween_all_completed"]
[connection signal="animation_started" from="CanvasLayer/Singy/AnimationPlayer" to="CanvasLayer/Singy" method="_on_AnimationPlayer_animation_started"]
[connection signal="timeout" from="CanvasLayer/Singy/Countdown" to="CanvasLayer/Singy" method="_on_Countdown_timeout"]
